<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use App\Models\Tweet;
use App\Models\Follower;
use App\Notifications\Tweety;

class User extends Authenticatable
{
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name',
        'username',
        'email',
        'password',
        'avatar',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];
    protected $unique = [
        'username',
    ];
    public function following()
    {
      return $this->belongsToMany('App\Models\User', 'followers', 'follower_user_id', 'user_id')->withTimestamps();
    }
    public function isFollowing(User $user)
    {
      return !is_null($this->following()->where('user_id', $user->id)->first());
    }
    public function followers()
    {
      return $this->belongsToMany('App\Models\User', 'followers', 'user_id', 'follower_user_id')->withTimestamps();
    }
    public function likes()
    {
      return $this->belongstoMany('App\Models\Tweet', 'tweet_id', 'id');
    }
    public function isLiking(Tweet $tweet)
    {
        return !is_null($this->liking()->where('tweet_id', $tweet->id)->first());
    }
    public function tweety()
    {
      return $this->hasMany('App\Models\Tweet', 'user_id', 'id');
      Notification::send($users, new Tweety($tweets));
      Notification::route('mail', 'daisywaithera1@gmail.com')
                ->route('nexmo', '5555555555')
                ->route('slack', 'https://hooks.slack.com/services/...')
                ->notify(new Tweety($tweety));
    }

    public function tweets()
{
    return $this->hasMany(Tweet::class, 'user_id');
}
    public function getTweetsCountAttribute(){
    return $this->tweets()->count();
}
    public function timeline()
  {
      $following = $this->following()->with(['tweets.author' => function ($query) {
          $query->orderBy('created_at', 'desc');
          // Sort id descending because the data generated by seeder is too close
          $query->orderBy('id', 'desc');
          $query->paginate(10);
      },'tweets.link'])->get();

      $timeline = $following->flatMap(function ($values) {
          return $values->tweets;
      });    // Sort descending by the creation date
      $sorted = $timeline->sortByDesc(function ($tweet) {
          return $tweet->created_at;

      });    return $sorted->values()->all();
          return $this->hasManyThrough(
                'App\Models\Tweet', 'App\Models\Follower',
                'user_id', 'user_id', 'follower_user_id'
            )->get();
  }
  public function messages() {
      return $this->hasMany(Message::class);
  }
}
